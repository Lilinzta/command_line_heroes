Command line heroes are software engineers, developers, programmers, systems administrators—coders. That variety in coding careers is almost as varied as the paths coders take to land their jobs.

Saron Yitbarek and Clive Thompson start the season by exploring some ways coders start their tech careers—some common, many unexpected. Many choose to start with a degree in computer science. But don’t underestimate the maturing bootcamp tracks, the mid-to-late-career switchers, and coders from outside the insulated tech hubs. You might be surprised who answers the call to code, where they come from—and how much they’ve already accomplished.

00:01-Saron Yitbarek

You're stuck on a desert island. You discover a broken down prop plane, some tools, and a handy-dandy manual. You've never fixed a plane before, but you're desperate to get off the island, so you get to work. Your determination might be enough to get that plane flying again. Now this is an extreme example, but when you're trying to figure out how something is put together, especially something that's physically in front of you like a plane, you've got a mental image of what you're working with and a manual to help you along. But what about software? If you're outside that world, it's pretty hard to figure out what to do with all those ones and zeros. And even when you're in it, it can be hard to visualize what you're putting together. That's the situation one person found themself in.

00:49-Clive Thompson

After 25 years of writing about software and its impact on everyday life, I realized that most people had no idea how software was made, or who made it, or why they wanted to make it. They didn't understand, you know, what were the decisions being made on their behalf by all these software engineers. It's just this huge mystery. I decided I wanted to write a book that would unlock that mystery, and show people how code gets made and who makes it.

01:21-Saron Yitbarek

That book is called, Coders: The Making of a New Tribe and the Remaking of the World. And the author is science and technology journalist, Clive Thompson. For the last 4 seasons, we featured so many epic stories of how coders have shaped the landscape around us. But what we haven't talked much about is the job itself, how it's done, how it's changed over time, how it might be evolving, and how we go about getting a job as a coder, especially for the first time. We've put together a mini-season of 3 episodes devoted to the job of being a coder.

02:01-Saron Yitbarek

Welcome to an all-new season of Command Line Heroes, an original podcast from Red Hat. I'm your host, Saron Yitbarek, and joining us for all 3 episodes this season is author of Coders and friend of the pod, Clive Thompson. Welcome, Clive.

02:19-Clive Thompson

Happy to be here, Saron.

02:20-Saron Yitbarek

Clive, you spent the last few years fully immersed in the world of coders. You've interviewed over 200 developers, sys admins, architects, engineers, and programmers for your book.

02:31-Clive Thompson

Yeah. I spoke to, boy, an awful lot of software developers all over the ecosystem.

02:37-Saron Yitbarek

Great. You're the perfect co-pilot. So glad you could join me.

02:40-Clive Thompson

Good to be here.

02:41-Saron Yitbarek

Let's start with the most traditional path to becoming a coder, going to college to get a computer science degree.

02:48-Vinamrata Singal

I think for what I do as a product manager, it's important to have that technical foundation. I'm glad I did it through a computer science program, because I feel like I don't only understand how I program something to do this, but I also understand what goes on under the hood.

3:06-Saron Yitbarek

That was Vinamrata Singal. She graduated from Stanford University in 2016 with a computer science (CS) degree. She says her education set her up for product managing positions at Facebook, Google, and other companies. Clive, do most coders out there, get CS degrees?

03:24-Clive Thompson

If you look at the Stack Overflow survey—that's the big coding site, and that they do a fantastic survey of 10s of 1000s of their users every year—their data suggests that about 60% of the coders that are on Stack Overflow that are professional, they have some sort of formal computer science training, or something close to it like electrical engineering. And the numbers may be a little higher than that, but let's just say two-thirds. It is still the most common route, far and away, for becoming a coder, is to go and get a computer science degree or something related to it.

04:01-Saron Yitbarek

Is that because CS degrees are lucrative?

04:04-Clive Thompson

Yeah, they are what an economist would call a costly signal. They indicate that, hey, I'm someone who's willing to spend a lot of time learning the stuff, so I'd be a good person to hire. If you're a developer, you're having to constantly learn all the time. New frameworks, new languages, new environments. Some of the reasons employers would tell me that they like getting people from computer science degrees is because those people just spent 4 years doing nothing but learning. And they're going to need to keep on learning.

04:37-Vinamrata Singal

When you get an undergraduate degree, you're learning that, but you're also learning the theoretical math. You're also learning about algorithms, and you're learning about networking and computer systems. And I think all of those just give you a very solid foundation so that if you were to switch industries or what not, like it would just be a lot easier.

04:56-Vinamrata Singal

The Stanford degree helped with being taken seriously. Honestly, just confidence. That's a big part of it, too. Dealing with imposter syndrome. And then also like people want to talk to you even applying to jobs after, you just, it's just a lot easier because of this big network you have.

05:12-Saron Yitbarek

Do CS degrees make them better performers than those who come into the industry non-traditionally?

05:21-Clive Thompson

That's a really great question. That's a hard one to answer because I got completely different answers from different employers. I had some people tell me that, "Yeah, CS people are just more confident and more self-assured and can hit the ground running, than self-trained people or bootcamp people." And then I heard exactly the opposite. I heard for example, David Kalt, he runs Reverb, which has become the dominant eCommerce site for selling musical equipment. Fantastically, growing, profitable firm. And he's like, I used to say, I only wanted CS grads, but they just didn't have all the sort of life skills that you want to be a productive team member. And more and more, he started hiring bootcamp people, self-trained people, people who are musicians who learned it on the side.

06:11-Clive Thompson

You also hear praise for the non-computer science people. I think from a certain class of investor or even old school coder. They're in their 50s or 60s and they taught themselves, using a Commodore 64 back in the 80s. When they see someone who came along and said, "Yeah, I just, I had some job in hospitality, and I hated it, and I learned a ton of stuff on YouTube and Code Academy." They're like, "Yeah, I want that person." It is very bimodal, shall we say. There is a class of employers that is really rigorous about only hiring CS. And there's a whole other class that actually sometimes regards as a real mark of pride to be self-taught or a scrappy person who changed their career and went to a bootcamp.

06:55-Ali Spittel

My story is very unique. I grew up in the middle of nowhere and my high school definitely was not highly funded. And so I did not know what programming was until I got into college.

07:10-Saron Yitbarek

Ali Spittel is a software engineer and a distinguished faculty member at General Assembly, a coding bootcamp. She started off taking computer science in college, but found herself going on a completely different path towards a coding career.

07:24-Ali Spittel

I learned Python. I fell absolutely in love with it. I thought it was magical how you could type something into the computer and something else would come out. And I quickly decided that I was going to double major in computer science, but then the next semester I took data structures and algorithms in C++ FLOSS, and I did make it through, but I was pulling all-nighters and was working so hard just to even make it through the class. And then I decided that programming really wasn't for me, dropped out, and just went along with my original major, which was political science. About a semester later, I was doing an internship that was mostly data analysis for political work. And I realized that I could automate a lot of my own job with programming. They found out about that and recommended me for a software engineering role.

08:17-Saron Yitbarek

I've interviewed hundreds of people, myself, and I almost always ask the question, “Is a CS degree actually valuable? Do you need it? Are you okay kind of being self-taught?” Just trying to get a feel for that. And I would guess that a CS degree would be super valuable because you're spending 4 years learning this very highly curated set of information. But then when I have these conversations, I get all types of answers. I get people who've said, "Actually, it really wasn't that practical." And I've had people who say, "Oh, that theoretical knowledge is so valuable."

08:47-Clive Thompson

Yeah. And I've also heard a mix. I've heard a strong signal from the people who are like, okay, we need computer science degrees. We don't really take seriously people that haven't done that. But there is also this whole other group that I think you've heard from that is completely the opposite. They're like, no, no, no. We want people who have real-world experience who can work in teams. We like people who can think outside of the box. And if someone's taught themselves, they have an even better growth mindset than someone that went to college, because maybe the person at college was accustomed to having stuff handed to them. The curriculum was there, they were marching through it. Whereas the person who just taught themselves some HTML, then some CSS, and then some JavaScript and Node and turned themselves into a full stack engineer. My God, that's someone with enormous get-up-and-go who you want on their team.

09:38-Ali Spittel

A different learning path is good for everybody. Computer science is incredible because you can learn all these theoretical bases for what you're going to be doing on a day-to-day basis. Self-teaching is another great path. That's mostly how I got my start, and it's going to make it so that you have this basis in learning these things on the job, which is what you're going to have to do anyways. And then the last part is bootcamps. If I were to go back and do it over again, I would do a bootcamp because of the ability to have an instructor that is looking over your work, but also the encouragement of having a curriculum to follow and the direction to still teach yourself while you are in an instructor-led classroom. But that being said, I think that every single path has valid reasons why you should choose it, and they should all be around and have different benefits for different people.

10:44-Kush Patel

Over 8 years, we have graduated about 3,000 students and been able to place about 95% of those students into software engineering roles with a median salary of about US$100,000 in our San Francisco campus and about US$90,000 from our New York campus, and have placed those students at top tech companies.

11:00-Saron Yitbarek

Kush Patel is the CEO of App Academy bootcamp. His bootcamp has a tuition model that allows graduates to pay after getting a job. This gives a lot more students a chance to learn to code. Graduates have been hired by companies like Google and can earn a decent salary.

11:18-Kush Patel

Over those years, we have placed about a 100 students at Google, which compares very favorably to basically every top computer science program. A very expedient way to land in one of the hottest jobs in technology.

11:32-Saron Yitbarek

So Clive, is App Academy bootcamp typical of coding bootcamps?

11:36-Clive Thompson

I would say they're typical of good coding bootcamps, but the bootcamp world itself is really diverse, ranging from fantastic, well-run places that I think teach people a lot, to some very sketchy fly-by-night organizations that have never got anyone a job.

11:57-Saron Yitbarek

So I graduated from a coding bootcamp about 6 years ago now, I think, and back then it felt like bootcamps were popping up. It was growing, it was a budding industry. And since then, I feel like bootcamps have evolved over the years. Is that something that you've seen?

12:12-Clive Thompson

Yeah, definitely. The best ones have maybe moderated a little bit their expectations. I think they came out of the gate basically promising that everyone was going to get these really great jobs, then that wasn't always possible. They sort of worked harder on setting expectations. They also realized they had to work really hard on the sort of job hunt part. Because they could give someone those skills, but it was really important to get them into a junior development job where they're going to learn a lot more.

12:43-Saron Yitbarek

I think the way that you pay for a bootcamp has changed over the years. And that's been really fascinating. Even the idea of paying after you get that training has become a little bit more official with ISAs, with income share agreements, kind of making that a little bit more binding, I guess. And there's some pros and cons to that. There's the danger of having to pay back when you didn't actually get anything in return.

13:06-Clive Thompson

I agree. Because bootcamps have grown so dramatically, and because they're clearly filling a hole. There aren't enough computer science programs. They can't expand fast enough to create all the CS degrees that these companies need. They need some other route. Bootcamps are sort of filling this gap. But that means in a weird way that they're sort of moving in the direction that community colleges, theoretically, you'd like to see them move in. Community colleges are regulated. I actually think that the government, local governments, state governments, federal governments could probably work on some standards for bootcamps that would be great because if they could make really, really good ones, and there could be a real stamp of approval, then it would encourage the best bootcamps to rise to those standards. And the other ones would either get flushed out or even shut down if they can't meet those regulatory requirements.

14:02-Saron Yitbarek

Let's talk to someone from a larger tech company about hiring non-traditionally. Will White has hired a lot of coders over the years, as a senior engineering manager at LinkedIn. The majority of them are CS grads, but he's realized there aren't enough of them to fill available positions. Three years ago, the company started an apprenticeship program called Reach.

14:25-Will White

The Reach program is a multi-year initiative where we bring in apprentices and help them train their engineering skills by pairing them with different mentors and managers. We believe that top talent can come from anywhere and Reach is one of the avenues that we use to find that talent. Particularly outside of the pool of CS candidates. Generally speaking, we're looking for folks with a passion for engineering and that can manifest in a lot of different ways, whether it's folks that have taken time to go to a bootcamp or have spent a lot of time pursuing self-learning on their own time. Things like tackling a project on the side, or writing code and trying to get a pull request received and accepted by an open source project that you've been working with.

15:16-Saron Yitbarek

Clive, both Will and Ali from earlier, talk about self-learning and you encountered a few self-taught coders yourself when you were doing your research.

15:25-Clive Thompson

There are an awful lot of self-taught coders. We're talking about, around one-third of the people in the Stack Overflow surveys are entirely, or at least substantially, self-taught. Sarah Drasner is a fantastic full-stack engineer. Became originally well known for her pioneering work in SVG graphics. And, she literally taught herself because her original job being an illustrator at a museum was sort of mothballed, because they essentially got a camera that was better at taking pictures than she was at drawing them. Her employer said, "Well, do you want to make websites for us?" And this is early on in the web. And she said, "Yeah, sure." And went home and literally just started reading books and trying to learn how to do it. She took that route and over the next number of years became an absolutely fantastic developer, top in her field. And those stories are not that unusual.

16:26-Clive Thompson

Mike Krieger, the coder behind Instagram, one of the two developers, but he did a lot of the heavy lifting. He originally taught himself as a kid, making websites. Started working on crazy little open source projects, helping to create plug-ins for Thunderbird. And that's where he started in it. It really raised him upwards heavily. To me, I actually think the self-taught mechanism is really interesting, and it's gotten easier than ever because there are resources that are set up for it, like FreeCodeCamp, which is how I learned HTML and CSS and JavaScript actually. And then there's just a million YouTube videos and open source projects and hackathons. Self-taught is a surprisingly viable on-ramp.

17:24-Rusty Justice

I'm the least likely person you'll ever meet to be in tech. I'm a mining engineer and a civil engineer by education. Necessity was what prompted us. We just had our coal industry here, which is the predominant industry in the region, collapsed. And so there was a huge unemployment problem.

17:43-Saron Yitbarek

That's a clip from a man with one of my favorite names ever, Rusty Justice. He's from Pikeville, Kentucky in central Appalachia, where the main industry has always been coal mining. Rusty ran businesses in the mining industry for years until the industry collapsed 5 years ago, then he and his business partner decided to pivot. They started Bit Source, a digital services company. Clive, you wrote about Rusty in your book. He's an example of a growing group of coders who've come into the industry mid-career. You used a term you called “blue collar coders.” What does that mean?

18:22-Clive Thompson

Well, it basically means a coder who is approaching the job in a way that's maybe a little different from how we've talked about coders in the last 15 or 20 years. For a long time, the idea of the coder was this young guy in a hoodie who's moving to Silicon Valley so they can do a startup and get millions of dollars in investment and maybe become a billionaire. And what blue collar coding means is someone who's approaching it more like the blue collar jobs of the 20th century, like the people who went to work doing skilled technical work on a Chrysler line, building cars. They had enormous technical skills, but it was considered to be sort of this stable middle class job. And that's kind of more what the idea of blue collar coding is. It's approaching the job as, we're not here to be this kid in a hoodie making millions, we're here to have a stable middle class job of the 21st century.

19:19-Clive Thompson

The truth is, only 8% of all coding jobs are in Silicon Valley, in that sort of, well-known area of consumer software. Everywhere else in the US, there's coding jobs. They're everywhere. They're in Tennessee, they're in Ohio, they're in upstate New York and they're not at Facebook and Google. They are at banks. They are at insurance companies, restaurants, or industrial companies. They all need software developers. And there's this kind of different way of thinking about what the career arc is when people are aiming outside that traditional area. And that's kind of where we're seeing blue collar coding coming from.

19:59-Saron Yitbarek

You featured another blue collar coder in your book, another person with an amazing name, Garland Couch. He used to work as a maintenance planner for a major mining company for 15 years before he got laid off. Then he joined Rusty's company and moved into the tech industry. Here's what it was like when he first started at Bit Source.

20:21-Garland Couch

I've joked in the past, and it's a semi-serious joke, that we really didn't know each other's last names for 22 weeks because everybody came in, sat down, and put their headphones on and went to work. And there was no talking, there was no laughing and joking and cutting up. You have to understand these are 10 people who were out of work trying to get a job. It was a very serious 22 weeks and all 10 of us were really, really focused on learning what needed to be learned.

20:57-Saron Yitbarek

Clive, you talked to a lot of blue collar workers who transitioned into tech, like Garland and Rusty, have these transitions been successful for the most part?

21:06-Clive Thompson

Yeah. All the people I talked to had enjoyed pretty good success for the most part. I think some of the things that helped out was because they were a little older, and a little on in their careers; they had a seriousness of purpose that maybe you don't have when you're a lot younger. They know how to learn. They know how to teach themselves. They have a sense that the stakes are important because they want a new career. Maybe their old career was vanishing, in the case of Garland. They definitely were not at all lacking in the passion and stick-to-it-ness that I think you really need to do well in coding, but also they often had sort of a sense of what their local market needed.

21:46-Clive Thompson

And in Garland's case, he had a local market that was starting this new high tech firm out in Kentucky. The other advantage that I think some of the people I spoke to who were really successful was that they had this broader view of where software exists. If you talk to the average 19-year-old student going into computer science, they think of software as Instagram and that's it. But if you talk to someone who has been working in the hospitality industry and they're 31, they know that hotels use a huge amount of software and they're like, I'm going to go work there. And those areas are hungry for talent.

22:22-Rusty Justice

The biggest learning lesson, personally, is all the misinformation we received when we were told about all these coding jobs and really it was a naivete on my part. I think more than anything, we were told there was a shortage of x number of developers so they had this earning potential. And the earning potential was equivalent to the earning potential we'd lost in these mining jobs. And so we thought if we just learned to code, then the world will beat a path to our door, and we'll have jobs. But nobody beat a path to our door to hire us because really why would you? You're a bunch of people that have never done it before. We've had to prove to the marketplace that we provide value.

23:03-Garland Couch

do think that real world experience—working in other industries and in other environments and in major corporations and dealing with those things that we dealt with—definitely helps with what we do now. I'll give you an example: we had a company that wanted us to build a bubble application for over-the-road truckers. And we had actually people that work here that have CDL licenses. Immediately it was like, wait a minute, you've got developers that actually have driven trucks? Yeah, we do.

23:41-Saron Yitbarek

Areas like Appalachia carry a lot of negative stereotypes, but what Rusty and Garland and others in their community are doing is creating models of positive disruption. And they're really proud of that. A final word from Garland.

23:56-Garland Couch

For me, blue collar means, that's a hard working individual who is willing to put in the work and willing to grind through things and solve problems. For me, the term blue collar coder, is a compliment.

24:17-Gillian

When I started the bootcamp, one month in, I'm like, “What on earth am I doing?” But the hours were long. It was really intense. But even though it was difficult, I really found that I wasn't really very tired and I just was excited to see what I could do the next day, how I could actually get better. At that point I knew I really enjoyed what I was doing.

24:42-Saron Yitbarek

That's Gillian. She was a physicist for over 20 years. When her job became redundant, she decided to give coding a go. She joined a Java™ bootcamp in her fifties. Two weeks after graduating from bootcamp, she got a job in the financial services industry. Now she's thriving, but understands that she'll likely be a junior, the rest of her career because she joined later in life, but that's okay with her. She's happy. And she contributes to her team.

25:11-Gillian

I might not be as skillful as they are doing Java development or have as much experience, but I can think. I can be analytical and I can look at the problem and ask intelligent questions. I might not know the answer, but at least I know the right questions to ask because I have experience doing a lot of problem solving.

25:33-Saron Yitbarek

So Clive, let's talk about being in the industry as an older worker. Gillian mentioned that she is a junior coder, and she's probably going to stay a junior coder for the rest of her career, which she's perfectly happy doing. I'm wondering if you start coding midlife, what does success look like?

25:49-Clive Thompson

A lot of the people I spoke to who were older, were getting into it because their existing industry wasn't interesting to them anymore. They hungered to make things, to be an engineer, or maybe their existing industry was falling apart. And they were like, I need someplace that's actually growing. And so they're not necessarily focused on becoming the top dog in the coding pyramid. They want rewarding, stable work. And definitely they're going to find that in coding, if they can get their first job and get their toe in the door and prove their worth, that's going to be there. Their motivations are much more along that blue color coding idea.

26:33-Elisabeth Greenbaum Kasson

It is partially society in general, but it's also the notion that if you're older, you're no longer teachable. You’re no longer flexible. That you feel that you know everything already, which is really crap, because what hiring managers are missing out on is people with a wealth of experience who really know how to ride up and down on whatever's happening at any given time.

26:57-Saron Yitbarek

That's Elisabeth Greenbaum Kasson, a technology and business journalist. And she says, "Ageism in the tech industry is very real. Many coders have been programming their whole lives. And as they age, getting a new programming gig starts to get harder. A lot of older coders get overlooked for jobs."

27:18-Saron Yitbarek

So Clive, you've interviewed tons of programmers. How many of them had experienced ageism and what are some of their stories?

27:24-Clive Thompson

Quite a few had experienced ageism if they had not managed to vault themselves up into the high levels of management. There's kind of 2 types of older developers. There are the ones who succeed in sort of jumping upwards to management. They're managing a whole team, and then maybe becoming vice president, CTO, or maybe becoming CEO and starting their own company. And they're happy. They're calling the shots. They're using their experience to sort of command and manage large teams of young, hungry developers. But there's this whole other cohort of coders who don't want to become management. They like making things. They like being the engineer that works to solve the problem. The problem they face is that the tech industry is not set up to let those people keep on doing that into their forties and fifties and sixties.

28:19-Clive Thompson

It wants people that are young and can work 100 hours a week without complaining, don't have any children or any responsibilities, and don't ask for more money. You think that, wow, software developers are paid a lot and they are, but if you've got a couple of kids and a house, you want even more money, you want stability and you don't want to work all those crazy hours. Maybe you don't need to because you're really good right now. But the employers assume falsely that if you're not doing the 100 crazy hours a week, you're not producing. There's all these strikes that start coming up against developers who just want to be a productive developer, and they start getting pushed out.

28:59-Elisabeth Greenbaum Kasson

The thing they can do just in terms of making themselves hireable is being visible in places where they wouldn't think to be visible. I think a lot of people in their fifties may underestimate GitHub for instance, or going to meetups where everybody might be significantly younger. Meetups for particular programming group-specific organizations, things like that, where they can go out and network a little bit and find out what's going on to remain current.

29:26-Saron Yitbarek

Clive, do you have any other words of wisdom for coders at a later stage in their career?

29:32-Clive Thompson

Sure. I actually asked older developers who were still doing it and still happy doing it, what their secrets were. And generally what they told me was that it was crucial to keep on learning, learning, learning, and building things in new frameworks and new languages that were sort of in demand so that they could have a repo that shows that they can do this stuff. Here's me showing, working with this new tool set in this new language, this new framework. That's a really big thing. And I think actually Elisabeth is exactly right. They also talked about the value of remaining outgoing and physically networking and all these things ranging from hackathons to meetups.

30:15-Clive Thompson

This classic gray beard, literally gray beard, coder that I met out in San Francisco said that he cracked up because he went to a IoT hackathon that was all embedded devices and really small processors, like Arduinos that have really strict memory limitations. And he was sort of saying, "This takes me back to the 1970s when I got into this, because, back then a desktop computer had enormously tight memory limitations." And so these were ways that he found to get himself out there and connected into the community. And he ended up realizing, wow, there's actually a lot of IoT work I can do. Keeping yourself out there and keeping yourself current really seemed to help a lot of the older developers out.

31:01-Saron Yitbarek

Clive, one final question to wrap. No matter what point a coder is in their career, whatever path they took to become a coder, what are some things all coders you spoke to had in common? What are some of the key indicators of success?

31:15-Clive Thompson

A really big one is a constant hunger to learn and to grow. That is true of every successful coder I met. They were insatiably curious. The instant that they discovered something was possible, a language had grown, a framework emerged, a tech stack had emerged, they wanted to know it. They wanted to explore it. They wanted to poke around with it. They wanted to build something in their spare time just to see what the heck was possible.

31:42-Clive Thompson

If anyone's listening to this and thinking, hey, maybe I want to sort of become a coder. The people that successfully made that switch have that deep burning curiosity, they enjoy the work. They would find it fun, and they will do it for pleasure in their spare time. In fact, they often like it because it gives them a sense of accomplishment and a sense of problem solving that they didn't have in their old jobs. And so, if I were to say the one thing that everyone who is successful had, including the people that made this transition, they had that incredible curiosity and hunger to tinker with these new things that kept them moving forward.

32:21-Saron Yitbarek

Thank you so much for joining me to talk about coder career paths, Clive.

32:26-Clive Thompson

I had a lot of fun.

32:27-Saron Yitbarek

Now that we know more about where we came from, what paths we took to get here in our careers, let's examine how and where we do our best work. In our next episode, Clive, you'll be back to join me, won't you?

32:41-Clive Thompson

Absolutely.

32:44-Saron Yitbarek

Command Line Heroes is an original podcast from Red Hat. We've got some extra interviews and research about the career paths of coders. Go to redhat.com/commandlineheroes for more. I'm Saron Yitbarek.

32:58-Clive Thompson

And I'm Clive Thompson.

32:58-Saron Yitbarek

Keep on coding.

32:59-Clive Thompson

Keep on coding.

33:01-Saron Yitbarek

Try that again. Let's count. I'll do one, two, three, and then we'll do keep on coding. Okay. One, two, three, keep on coding.

33:10-Clive Thompson

Keep on coding.

33:17-Saron Yitbarek

Keep on coding.